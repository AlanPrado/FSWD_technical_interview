# Question 1

For a word n be an anagram of m word, all the letters in n should be contained
in m.

For example,
    m: "aaab"
    n: "aab"

Note that the amount of letters "a" from n should have less or equal the amount
of letter "a" from m.

To solve this problem we can count the frequency of each letter from the words
and verify if satisfy the both criteria explained above.

For improve the letter search performance, we can make use of a dictionary.

Step 1 : Counting letter frequency
m: { a: 3, b: 1 } and n: { a: 2, b: 1 }

Step 2 : Comparison
n['a'] <= m['a'] and n['b'] <= m['b']

Thus, n is an anagram of m.

## Time Complexity

____________| Worst _________| Average ________| Better _________
Step 1      | n + n          | n + n / 2       | n + 1
Step 2      | 1              | 13              | 26
Total       | O(2n) + O(1)   | O(1.5n) + O(13) | O(n + 1) + O(26)
O           | O(n)           | O(n)            | O(n)


Step 1: Counting letter frequency
Step 2: Comparison - Assuming that we have 26 letters at most, but the
important aspect is that we have a constant amount letter depending on charset.

## Space Complexity

____________| Worst _________| Average ________| Better _________
Step 1      | 2 * (26 + 26)  | 2 * (13 + 13)   | 2 * (1 + 1)
Total       | O(104)         | O(52)           | O(4)
O           | O(1)           | O(1)            | O(1)

Step 1: Counting letter frequency

# Question 2
